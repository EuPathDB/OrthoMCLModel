<?xml version="1.0" encoding="UTF-8"?>
<tuningConfig>

  <tuningTable name="SequenceAttributes">
    <externalDependency name="apidb.OrthologGroup"/>
    <externalDependency name="apidb.OrthologGroupAaSequence"/>
    <externalDependency name="apidb.OrthomclTaxon"/>
    <externalDependency name="dots.AaSequenceDbRef"/>
    <externalDependency name="dots.AaSequenceEnzymeClass"/>
    <externalDependency name="dots.ExternalAaSequence"/>
    <externalDependency name="sres.DbRef"/>
    <externalDependency name="sres.EnzymeClass"/>
    <externalDependency name="sres.ExternalDatabase"/>
    <externalDependency name="sres.ExternalDatabaseRelease"/>
    <sql>
      <![CDATA[
        create table SequenceAttributes&1 nologging as
        select eas.secondary_identifier AS full_id, eas.source_id, eas.aa_sequence_id,
               eas.length, substr(eas.description, 1, 120) AS product,
               eas.molecular_weight, eas.taxon_id, ot.orthomcl_taxon_id,
               ot.three_letter_abbrev AS taxon_abbreviation, ot.name AS taxon_name,
               ot.core_peripheral, OrthologGroup.group_name, OrthologGroup.ortholog_group_id,
               OrthologGroup.group_size, OrthologGroup.peripheral_ortholog_group_id,
	       OrthologGroup.peripheral_group_size, EcNumbers.ec_numbers, OldGroups.old_groups,
	       urls.source_url, urls.source_text
        from dots.ExternalAaSequence eas, apidb.OrthomclTaxon ot,
	     (select p.aa_sequence_id, p.group_name, og.ortholog_group_id, og.number_of_members as group_size,
	             p.peripheral_ortholog_group_id, p.peripheral_group_size     
              from apidb.OrthologGroup og, 
                   (select ogs.aa_sequence_id, og.name as group_name, og.ortholog_group_id as peripheral_ortholog_group_id, 
		           og.number_of_members as peripheral_group_size
		    from apidb.OrthologGroupAaSequence ogs, apidb.OrthologGroup og
                    where ogs.ortholog_group_id = og.ortholog_group_id                                                                                                                    and og.core_peripheral_residual='P') p
              where og.core_peripheral_residual='C'
                    and p.group_name = og.name
	     UNION
	     select ogs.aa_sequence_id, og.name as group_name, og.ortholog_group_id, og.number_of_members as group_size,og.ortholog_group_id as peripheral_ortholog_group_id, og.number_of_members as peripheral_group_size         
	     from apidb.OrthologGroupAaSequence ogs, apidb.OrthologGroup og                                                                  
	     where ogs.ortholog_group_id = og.ortholog_group_id
	         and og.core_peripheral_residual='R'
	     ) OrthologGroup,
             (select asec.aa_sequence_id,
                     substr(listagg(ec.ec_number, ', ') within group (order by ec.ec_number), 1, 200) as ec_numbers
               from dots.AaSequenceEnzymeClass asec,
               sres.EnzymeClass ec
             where asec.enzyme_class_id = ec.enzyme_class_id
             group by asec.aa_sequence_id
             ) EcNumbers,
             (select aa.aa_sequence_id,
              listagg(ref.primary_identifier, ', ') within group (order by ref.primary_identifier) as old_groups
              from sres.DbRef ref, sres.ExternalDatabase db, sres.ExternalDatabaseRelease dbr,
	          (select distinct aa_sequence_id, db_ref_id
                    from dots.AaSequenceDbRef sdbr) aa
              where db.name = 'OrthoMCL Old Groups'
                and dbr.external_database_id = db.external_database_id
                and ref.external_database_release_id = dbr.external_database_release_id
                and aa.db_ref_id = ref.db_ref_id
              group by aa.aa_sequence_id
             ) OldGroups,
	     (SELECT eas.aa_sequence_id,
	             CASE WHEN ores.resource_name IN ('CryptoDB','PlasmoDB','PiroplasmaDB','MicrosporidiaDB','SchistoDB',
                          'FungiDB','TriTrypDB','VectorBase','AmoebaDB','ToxoDB','HostDB','TrichDB','GiardiaDB')
		     THEN SUBSTR(ores.resource_url,0,INSTR(ores.resource_url,'/downloads')) || 'record/gene/' 
                          || eas.source_id 
	             WHEN ores.resource_name ='Uniprot'
		     THEN SUBSTR(ores.resource_url,0,INSTR(ores.resource_url,'/proteomes')) || 'uniprot/' 
		          || eas.source_id
		     ELSE '' END AS source_url,
		     CASE WHEN ores.resource_name is null THEN '' ELSE eas.source_id || ' (' || ores.resource_name || ')' END AS source_text
	      FROM dots.ExternalAaSequence eas, apidb.OrthomclTaxon ot, apidb.orthomclresource ores
	      WHERE NVL(SUBSTR(eas.secondary_identifier, 0, INSTR(eas.secondary_identifier, '|')-1), eas.secondary_identifier)
	                 = ot.three_letter_abbrev
		    AND ot.orthomcl_taxon_id = ores.orthomcl_taxon_id) urls
        where NVL(SUBSTR(eas.secondary_identifier, 0, INSTR(eas.secondary_identifier, '|')-1), eas.secondary_identifier) = ot.three_letter_abbrev
          and eas.aa_sequence_id = OrthologGroup.aa_sequence_id(+)
          and eas.aa_sequence_id = EcNumbers.aa_sequence_id(+)
          and eas.aa_sequence_id = OldGroups.aa_sequence_id(+)
          and eas.aa_sequence_id = urls.aa_sequence_id(+)
      ]]>
    </sql>

    <sql>
      <![CDATA[
        alter table SequenceAttributes&1
          add constraint SeqAttrs_pk&1 primary key (full_id)
      ]]>
    </sql>

    <sql>
      <![CDATA[
        create unique index SeqAttrs_idx&1 ON SequenceAttributes&1 (full_id, group_name, taxon_id, source_id)
        tablespace indx
      ]]>
    </sql>

    <sql>
      <![CDATA[
        create unique index SeqAttrs_gusIdx&1 ON SequenceAttributes&1 (ortholog_group_id, aa_sequence_id)
        tablespace indx
      ]]>
    </sql>

    <sql>
      <![CDATA[
        create unique index SeqAttrs_idx2&1 ON SequenceAttributes&1 (group_name, length desc, full_id, taxon_id)
        tablespace indx
      ]]>
    </sql>

    <sql>
      <![CDATA[
        create unique index SeqAttrs_idx3&1
          on SequenceAttributes&1 (aa_sequence_id, group_name, ortholog_group_id, orthomcl_taxon_id, taxon_id)
        tablespace indx
      ]]>
    </sql>

    <sql>
      <![CDATA[
        create unique index SeqAttrs_idx4&1 ON SequenceAttributes&1 (source_id, full_id, group_name, taxon_id)
        tablespace indx
      ]]>
    </sql>

  </tuningTable>

  <tuningTable name="TypeAheadCounts">
    <!-- internalDependency name="GeneAttributes"/ -->
    <externalDependency name="dots.DbRefAaFeature"/>
    <externalDependency name="sres.DbRef"/>
    <externalDependency name="dots.AaFeature"/>
    <externalDependency name="dots.TranslatedAaFeature"/>
    <externalDependency name="dots.Transcript"/>
    <externalDependency name="sres.ExternalDatabase"/>
    <externalDependency name="sres.ExternalDatabaseRelease"/>
    <externalDependency name="sres.EnzymeClass"/>
    <externalDependency name="dots.AaSequenceEnzymeClass"/>
    <externalDependency name="dots.GoAssociation"/>
    <externalDependency name="dots.GoAssociationInstance"/>
    <externalDependency name="sres.OntologyTerm"/>
    <externalDependency name="core.TableInfo"/>
    <sql>
      <![CDATA[
CREATE TABLE TypeAheadCounts&1 NOLOGGING AS
   (SELECT DISTINCT dr.primary_identifier as option_id,
                   count(distinct aaf.aa_sequence_id) AS protein_count
   FROM dots.DbRefAaFeature draf, sres.DbRef dr, dots.aafeature aaf,
        sres.ExternalDatabaseRelease edr, sres.ExternalDatabase ed
   WHERE draf.db_ref_id = dr.db_ref_id
   AND dr.external_database_release_id
       = edr.external_database_release_id
   AND edr.external_database_id = ed.external_database_id
   AND aaf.aa_feature_id = draf.aa_feature_id
   GROUP BY dr.primary_identifier
   )
   UNION
   (SELECT DISTINCT ec.ec_number AS option_id,
          COUNT(DISTINCT asec.aa_sequence_id) AS protein_count
   FROM sres.enzymeClass ec,
        dots.aaSequenceEnzymeClass asec
   WHERE  asec.enzyme_class_id = ec.enzyme_class_id
   GROUP BY ec.ec_number)
   UNION                
   (SELECT DISTINCT gt.source_id AS option_id,
           COUNT(DISTINCT aaf.aa_sequence_id) AS protein_count
    FROM dots.AaFeature aaf,
         dots.GoAssociation ga, sres.OntologyTerm gt,
         dots.GoAssociationInstance gai,core.TableInfo ti
    WHERE aaf.aa_sequence_id = ga.row_id
    AND ga.table_id = ti.table_id
    AND ti.name = 'ExternalAASequence'
    AND ga.go_term_id = gt.ontology_term_id
    AND ga.go_association_id = gai.go_association_id
    GROUP BY gt.source_id)
      ]]>
    </sql>
    <sql>
      <![CDATA[
CREATE INDEX TypeAheadCounts_idx&1 ON TypeAheadCounts&1 (option_id)
tablespace indx
      ]]>
    </sql>
  </tuningTable>

  <tuningTable name="DomainAssignment">
    <internalDependency name="SequenceAttributes"/>
    <externalDependency name="dots.DomainFeature"/>
    <externalDependency name="dots.DbRefAaFeature"/>
    <externalDependency name="sres.DbRef"/>
    <externalDependency name="sres.ExternalDatabaseRelease"/>
    <externalDependency name="sres.ExternalDatabase"/>
    <intermediateTable name="DomainIndex"/>

    <sql>
      <![CDATA[
        create table DomainAssignment&1 nologging as
        select sa.full_id, sa.group_name,
               db.db_ref_id, db.primary_identifier as accession,
               db.secondary_identifier as symbol, db.remark as description,
               cast (null as NUMBER) as domain_index, sa.aa_sequence_id, al.start_min, al.end_max
        from SequenceAttributes sa, dots.DomainFeature df,
             dots.DbRefAaFeature dbaf, sres.DbRef db,
             sres.ExternalDatabaseRelease edr, sres.ExternalDatabase ed,
             dots.AaLocation al
        where sa.aa_sequence_id = df.aa_sequence_id
          and df.aa_feature_id = dbaf.aa_feature_id
          and dbaf.db_ref_id = db.db_ref_id
          and db.external_database_release_id = edr.external_database_release_id
          and edr.external_database_id = ed.external_database_id
          and df.aa_feature_id = al.aa_feature_id(+)
          and ed.name = 'PFAM'
      ]]>
    </sql>

    <sql>
      <![CDATA[
        create index domain_accession_ix&1
               on DomainAssignment&1 (accession, full_id, group_name)
      ]]>
    </sql>

    <sql>
      <![CDATA[
        create table domainIndex nologging as
        select rownum as domain_index, accession
        from (select distinct accession
              from DomainAssignment&1
              order by accession)
      ]]>
    </sql>

    <sql>
      <![CDATA[
        create index domainIdxIdx on DomainIndex(accession, domain_index)
      ]]>
    </sql>

    <sql>
      <![CDATA[
        update DomainAssignment&1 da
        set domain_index = (select domain_index
                            from DomainIndex
                            where accession = da.accession)
      ]]>
    </sql>

    <sql>
      <![CDATA[
        create index domain_ix_ix&1
               on DomainAssignment&1 (domain_index, accession, full_id)
      ]]>
    </sql>

    <sql>
      <![CDATA[
        create index domain_group_ix&1
               on DomainAssignment&1 (group_name, accession, full_id)
      ]]>
    </sql>

    <sql>
      <![CDATA[
        create index domain_seq_ix&1
               on DomainAssignment&1 (aa_sequence_id, accession, full_id, group_name)
      ]]>
    </sql>

  </tuningTable>


  <tuningTable name="PhyleticPattern">
    <externalDependency name="apidb.OrthologGroup"/>
    <externalDependency name="apidb.OrthologGroupTaxon"/>
    <externalDependency name="apidb.OrthomclTaxon"/>
    <sql>
      <![CDATA[
CREATE TABLE PhyleticPattern&1 NOLOGGING AS
    (SELECT actual.group_name,
            actual.alveolata as alveolata_actual,
	    total.alveolata as alveolata_total,
	    round(100*actual.alveolata/total.alveolata,0) AS alveolata_percent,
            actual.archaea as archaea_actual,
	    total.archaea as archaea_total,
	    round(100*actual.archaea/total.archaea,0) AS archaea_percent,
            actual.amoeba as amoeba_actual,
	    total.amoeba as amoeba_total,
	    round(100*actual.amoeba/total.amoeba,0) AS amoeba_percent,
            actual.bacteria as bacteria_actual,
	    total.bacteria as bacteria_total,
	    round(100*actual.bacteria/total.bacteria,0) AS bacteria_percent,
            actual.fungi as fungi_actual,
	    total.fungi as fungi_total,
	    round(100*actual.fungi/total.fungi,0) AS fungi_percent,
            actual.euglenozoa as euglenozoa_actual,
	    total.euglenozoa as euglenozoa_total,
	    round(100*actual.euglenozoa/total.euglenozoa,0) AS euglenozoa_percent,
            actual.metazoa as metazoa_actual,
	    total.metazoa as metazoa_total,
	    round(100*actual.metazoa/total.metazoa,0) AS metazoa_percent,
            actual.viridiplantae as viridiplantae_actual,
	    total.viridiplantae as viridiplantae_total,
	    round(100*actual.viridiplantae/total.viridiplantae,0) AS viridiplantae_percent,
            actual.other_eukaryotes as other_eukaryotes_actual,
	    total.other_eukaryotes as other_eukaryotes_total,
	    round(100*actual.other_eukaryotes/total.other_eukaryotes,0) AS other_eukaryotes_percent
    FROM
        (SELECT SUM(CASE clade WHEN 'ALVE' THEN num ELSE 0 END) as alveolata,
                SUM(CASE clade WHEN 'ARCH' THEN num ELSE 0 END) as archaea,
                SUM(CASE clade WHEN 'AMOE' THEN num ELSE 0 END) as amoeba,
                SUM(CASE clade WHEN 'BACT' THEN num ELSE 0 END) as bacteria,
                SUM(CASE clade WHEN 'FUNG' THEN num ELSE 0 END) as fungi,
                SUM(CASE clade WHEN 'EUGL' THEN num ELSE 0 END) as euglenozoa,
                SUM(CASE clade WHEN 'META' THEN num ELSE 0 END) as metazoa,
                SUM(CASE clade WHEN 'VIRI' THEN num ELSE 0 END) as viridiplantae,
                SUM(CASE clade WHEN 'OEUK' THEN num ELSE 0 END) as other_eukaryotes
         FROM (SELECT 'BACT' AS clade, COUNT(*) AS num
               FROM apidb.OrthomclTaxon
               WHERE core_peripheral in ('C','P')
               CONNECT BY PRIOR orthomcl_taxon_id = parent_id
               START WITH orthomcl_taxon_id IN (SELECT orthomcl_taxon_id
                                                FROM apidb.OrthomclTaxon
                                                WHERE three_letter_abbrev ='BACT')
               UNION                                 
               SELECT 'ARCH' AS clade, COUNT(*) AS num
               FROM apidb.OrthomclTaxon
               WHERE core_peripheral in ('C','P')
               CONNECT BY PRIOR orthomcl_taxon_id = parent_id
               START WITH orthomcl_taxon_id IN (SELECT orthomcl_taxon_id
                                                FROM apidb.OrthomclTaxon
                                                WHERE three_letter_abbrev ='ARCH')
               UNION
               SELECT 'ALVE' AS clade, COUNT(*) AS num
               FROM apidb.OrthomclTaxon
               WHERE core_peripheral in ('C','P')
               CONNECT BY PRIOR orthomcl_taxon_id = parent_id
               START WITH orthomcl_taxon_id IN (SELECT orthomcl_taxon_id
                                                FROM apidb.OrthomclTaxon
                                                WHERE three_letter_abbrev ='ALVE')
               UNION                                 
               SELECT 'AMOE' AS clade, COUNT(*) AS num
               FROM apidb.OrthomclTaxon
               WHERE core_peripheral in ('C','P')
               CONNECT BY PRIOR orthomcl_taxon_id = parent_id
               START WITH orthomcl_taxon_id IN (SELECT orthomcl_taxon_id
                                                FROM apidb.OrthomclTaxon
                                                WHERE three_letter_abbrev ='AMOE')
               UNION                                 
               SELECT 'EUGL' AS clade, COUNT(*) AS num
               FROM apidb.OrthomclTaxon
               WHERE core_peripheral in ('C','P')
               CONNECT BY PRIOR orthomcl_taxon_id = parent_id
               START WITH orthomcl_taxon_id IN (SELECT orthomcl_taxon_id
                                                FROM apidb.OrthomclTaxon
                                                WHERE three_letter_abbrev ='EUGL')
               UNION                                 
               SELECT 'VIRI' AS clade, COUNT(*) AS num
               FROM apidb.OrthomclTaxon
               WHERE core_peripheral in ('C','P')
               CONNECT BY PRIOR orthomcl_taxon_id = parent_id
               START WITH orthomcl_taxon_id IN (SELECT orthomcl_taxon_id
                                                FROM apidb.OrthomclTaxon
                                                WHERE three_letter_abbrev ='VIRI')
               UNION                                 
               SELECT 'FUNG' AS clade, COUNT(*) AS num
               FROM apidb.OrthomclTaxon
               WHERE core_peripheral in ('C','P')
               CONNECT BY PRIOR orthomcl_taxon_id = parent_id
               START WITH orthomcl_taxon_id IN (SELECT orthomcl_taxon_id
                                                FROM apidb.OrthomclTaxon
                                                WHERE three_letter_abbrev ='FUNG')
               UNION                                 
               SELECT 'META' AS clade, COUNT(*) AS num
               FROM apidb.OrthomclTaxon
               WHERE core_peripheral in ('C','P')
               CONNECT BY PRIOR orthomcl_taxon_id = parent_id
               START WITH orthomcl_taxon_id IN (SELECT orthomcl_taxon_id
                                                FROM apidb.OrthomclTaxon
                                                WHERE three_letter_abbrev ='META')
               UNION                                 
               SELECT 'OEUK' AS clade, COUNT(*) AS num
               FROM apidb.OrthomclTaxon
               WHERE core_peripheral in ('C','P')
               CONNECT BY PRIOR orthomcl_taxon_id = parent_id
               START WITH orthomcl_taxon_id IN (SELECT orthomcl_taxon_id
                                                FROM apidb.OrthomclTaxon
                                                WHERE three_letter_abbrev ='OEUK')
        )) total,
        (SELECT name as group_name,
                SUM(CASE three_letter_abbrev WHEN 'ALVE' THEN number_of_taxa ELSE 0 END) as alveolata,
                SUM(CASE three_letter_abbrev WHEN 'ARCH' THEN number_of_taxa ELSE 0 END) as archaea,
                SUM(CASE three_letter_abbrev WHEN 'AMOE' THEN number_of_taxa ELSE 0 END) as amoeba,
                SUM(CASE three_letter_abbrev WHEN 'BACT' THEN number_of_taxa ELSE 0 END) as bacteria,
                SUM(CASE three_letter_abbrev WHEN 'FUNG' THEN number_of_taxa ELSE 0 END) as fungi,
                SUM(CASE three_letter_abbrev WHEN 'EUGL' THEN number_of_taxa ELSE 0 END) as euglenozoa,
                SUM(CASE three_letter_abbrev WHEN 'META' THEN number_of_taxa ELSE 0 END) as metazoa,
                SUM(CASE three_letter_abbrev WHEN 'VIRI' THEN number_of_taxa ELSE 0 END) as viridiplantae,
                SUM(CASE three_letter_abbrev WHEN 'OEUK' THEN number_of_taxa ELSE 0 END) as other_eukaryotes
         FROM (SELECT og.name,agt.three_letter_abbrev,agt.number_of_taxa
               FROM ApiDB.OrthologGroupTaxon agt, apidb.orthologgroup og
               WHERE agt.ortholog_group_id = og.ortholog_group_id
                     AND agt.three_letter_abbrev IN ('BACT','ARCH','ALVE','AMOE','EUGL','VIRI','FUNG','META','OEUK'))
         GROUP BY name) actual)
      ]]>
    </sql>
    <sql>
      <![CDATA[
CREATE INDEX PhyleticPattern_idx&1 ON PhyleticPattern&1 (group_name)
tablespace indx
      ]]>
    </sql>
  </tuningTable>

  <tuningTable name="GroupDomainAttribute">
    <externalDependency name="apidb.OrthologGroup"/>
    <internalDependency name="DomainAssignment"/>
    <sql>
      <![CDATA[
CREATE TABLE GroupDomainAttribute&1 NOLOGGING AS
(
SELECT og.name AS group_name, ag.descriptions
FROM apidb.OrthologGroup og,
     (SELECT group_name,
             LISTAGG(accession ||' (' || num_proteins|| ')', ', ') WITHIN GROUP (ORDER BY rnk) AS descriptions
      FROM (SELECT group_name, accession, num_proteins, rnk
            FROM (SELECT group_name, accession, num_proteins,
	                 rank() OVER (PARTITION BY group_name ORDER BY num_proteins DESC) rnk
		  FROM (SELECT group_name, accession, count(full_id) AS num_proteins
		        FROM DomainAssignment
			GROUP BY group_name,accession
		        )
		  )
	    WHERE rnk <= 3
	    )
      GROUP BY group_name
      ORDER BY 1
      ) ag
WHERE og.core_peripheral_residual IN ('P','R')
      AND og.name = ag.group_name(+)
)
      ]]>
    </sql>
    <sql>
      <![CDATA[
CREATE INDEX GroupDomainAttribute_idx&1 ON GroupDomainAttribute&1 (group_name)
tablespace indx
      ]]>
    </sql>
  </tuningTable>



</tuningConfig>
